When would you want to use a remote repository rather than keeping all your work local?

Remote repository is not a pre-requisite for solo projects. However, when multiple
collaborators collectively contribute to a project (like in most real world 
scenarios), remote repositories become a neccessity.

Even for single developer projects, remote repositories are good backups that come
handy if the local machine crashes.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Git's auto pull can cause confusions as the local git repository gets flooded with changes
that have crept in from the remote repository without the user's consent.

It can also cause loss of the recent changes in working directory or raise conflict flags
if another user accidently changes the same segment of code that the  local  user changed
and pushed those changes to github. This can be irritating.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are used when we want to experiment changes on a public repository on github that
we don't have permission to change. Fork creates a copy/clone of the repository in our
account. We can then modify it or suggest changes to the original repository.

Clone is used to create a copy of a remote repository from github to our local
machine.

Branch is used within a repository to carry out diffrent logical pieces of work. 

To copy repository,

GitHub -----> GitHub : Fork
GitHub -----> Local  : Clone
Local  -----> Local  : Clone

What is the benefit of having a copy of the last known state of the remote stored locally?

Using git fetch or git pull to have a local copy of last known state of remote, helps us
to work on latest piece of code. If every collaborator constantly stayed updated, it
would reduce chances of collaboration conflicts, that arise due to conflicting state of
the remote and local repositories.

git fetch origin
git merge master origin/master

(or)
git pull origin master

Note: git commit --amend
(continue working on most recent commit - commit made too early)

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

- GitHub : common cloud storage platform for git repositories.
- Git diff
- Git branches and merge 

Collaboration without github and git would involve ever-shuttling pieces of code (via ftp or
e-mail), that depended completely on human intelligence and speed to find the changes between
two versions. Merging files with two logically different piece of change would seem like a
near impossible task.

The maximum number of collaborators would be limited to 3 or 4.

GitHub breaks the location and time barriers for a developer and allows him to concentrate
on producing products rather than fixing the wrecks of his broken code or tidying his desktop
that is flooded with old versions of code (sans commit messages) that cannot speak for themselves
as those within git can.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When multiple collaborators are working in a hierarchial company setup, it is necessary to
get the changes approved before incorporating them in the main program. New branches can
be made for each new feature and pull request can be initiated to review the change before 
add them to the master branch.

For large public repositories, it keeps the master branch organised for public to inspect
and understand. It ensures that the master branch is always in tact.
