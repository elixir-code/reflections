What happens when you initialize a repository? Why do you need to do it?

A. Initialising a repository using "git init" preps the directory with the
necessary metadata files that can store data about the history the files in
the repository. It creates a hidden .git directory within the original
directory which enables us to use 'git commands' that track it's history.

How is the staging area different from the working directory and the repository? What value do you think it offers?

A. Staging area is a intermediate ground that lets you selectively commit and 
track parts of the working directory to the repository.

The git is completely ignornant of the changes to the others files in working
directory and when a earlier commit is checked out only the files in repository
are reverted the previous state. The other files remain unchanged.

It saves some memory as some files are not expected to be modified throughout
the course of development of the program or they are not yet ready to become
part of the program.

How can you use the staging area to make sure you have one commit per logical change?

A. We often make experiment 'multiple changes' simaltaneously in multiple files.
However, commiting logical irrelated changes and incomplete works together would
clutter the log and render commits useless.

We can stage a file when one logical change is made and continue working. These
staged files can be selectively commited or other logically related changes can
later be staged and commited together.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A. Git branches come handy when we want to experiment changes and try out variants
that we want to keep aloof from the main development line. 

Branches can be used to differentiate the variants of the program - 'Bussiness to Bussiness' 
product and Bussiness to consumer product or to experiment new features that we may merge
with the main program in the future.

How do the diagrams help you visualize the branch structure?

A. The branch diagram representing commits as ellipses and connections joining each
commit to its parent as straight lines, helps us visualise the entire commit history.

Tracing the parent of each commit starting with the tip of the branch and repeating the
entire excerise for each branch recreates the entire picture of the workflow, i.e., the
main quality production line (master branch) and forks where the new branches stemed out.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A. Git merge logically combines the commits or changes from the currently checked out out branch
and other branches that follow the 'git merge' statement.It does so by comparing the version
of the files in the branches and the state of the files before the branches diverged.

The merged version is a commit in the checked out branch, whose parents are all the most recent
commits from the branches we merged. Hence, in the diagram the merged commit has the label
of the checked out branch and is connected to all most recent commits from the branches we merged.
The commits from merged branches are interleaved in git log and sorted by timestamp.
